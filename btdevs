#!/usr/bin/env python3

# btdevs: a wrapper for bluetoothctl that allows to connect/disconnect
# Bluetooth devices by using an alias.

# Usage: btdevs <action> <aliases>...
#               <action>: c, conn, connnect
#                         d, disc, disconnect
#                         s, stat, status

# Aliases are saved in the file ~/.config/btdevs.conf using the
# following format:
#
# [Devices]
# alias1 = address1
# alias2 = address2
# ...

# Device addresses can be found using bluetoothctl itself or your
# preferred Bluetooth utility.

import configparser
from os.path import expanduser, basename
import re
import subprocess
import sys


def usage():
    progname = basename(sys.argv[0])
    print(f"usage: {progname} <action> <aliases>...", file=sys.stderr)
    print("    <action>: c, conn, connect     : connect to device(s)",
          file=sys.stderr)
    print("              d, disc, disconnect  : disconnect from device(s)",
          file=sys.stderr)
    print("              s, stat, status      : check status of device(s)",
          file=sys.stderr)
    print("              on                   : turn controller on (no "
          "aliases required)", file=sys.stderr)
    print("              off                  : turn controller off (no "
          "aliases required)", file=sys.stderr)


def get_address(config, alias):
    try:
        return config["Devices"][alias]
    except KeyError:
        progname = basename(sys.argv[0])
        print(
            f"{progname}: device \"{alias}\" does not exist", file=sys.stderr)
        return None


def connect(config, devices):
    if not devices:
        usage()
        sys.exit(1)

    for dev in devices:
        addr = get_address(config, dev)

        if addr:
            subprocess.run(["bluetoothctl", "connect", addr])


def disconnect(config, devices):
    if not devices:
        usage()
        sys.exit(1)

    for dev in devices:
        addr = get_address(config, dev)

        if addr:
            subprocess.run(["bluetoothctl", "disconnect", addr])


def status(config, devices):
    if not devices:
        usage()
        sys.exit(1)

    for dev in devices:
        addr = get_address(config, dev)

        if addr == None:
            continue

        output = subprocess.run(
            ["bluetoothctl", "info", addr], capture_output=True).stdout
        output = output.decode("utf-8").split("\n")

        for line in output:
            res = re.match("\s*Connected: (yes|no)$", line)
            if res and res.group(1) == "yes":
                print(f"Device \"{dev}\" ({addr}) is connected")
            elif res and res.group(1) == "no":
                print(f"Device \"{dev}\" ({addr}) is not connected")


def power_on():
    print("Turning Bluetooth controller on...")
    subprocess.run(["bluetoothctl", "power", "on"])


def power_off():
    print("Turning Bluetooth controller off...")
    subprocess.run(["bluetoothctl", "power", "off"])


def main():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    config = configparser.ConfigParser()
    config.read(f'{expanduser("~")}/.config/btdevs.conf')

    action = sys.argv[1]
    if action == "c" or action == "conn" or action == "connect":
        connect(config, sys.argv[2:])
    elif action == "d" or action == "disc" or action == "disconnect":
        disconnect(config, sys.argv[2:])
    elif action == "s" or action == "stat" or action == "status":
        status(config, sys.argv[2:])
    elif action == "on":
        power_on()
    elif action == "off":
        power_off()
    else:
        progname = basename(sys.argv[0])
        print(f"{progname}: invalid option \"{action}\"", file=sys.stderr)
        usage()
        sys.exit(1)


if __name__ == "__main__":
    main()

# vim: set syntax=python
