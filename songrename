#!/usr/bin/env python3

# songrename: Changes metadata of a music file and renames it if desired.

# Usage: songrename [-r] <file> --title <title> --artist <artist>
#   [--album <album>]

# -r: Renames <file> following the format `<artist> - <title>.<extension>'
# --title <title>: Title of the song
# --artist <artist>: Artist who played the song
# --album <album>: Album of the song (optional)

# This program requires kid3-cli to be installed.

import argparse
import os
import sys
import subprocess
import shutil


def change_metadata(filename, artist, title, album):
    args = ['kid3-cli', f'{filename}',
            '-c', f'set artist \"{artist}\"',
            '-c', f'set title \"{title}\"']

    args.append('-c')
    if album:
        args.append(f'set album \"{album}\"')
    else:
        args.append('set album \"\"')

    proc = subprocess.run(args, capture_output=True, stdout=None, check=True)
    print(proc.stderr.decode('utf-8'))


def main():
    if not shutil.which("kid3-cli"):
        print('This program requires kid3-cli to be installed.',
                file=sys.stderr)
        sys.exit(1)

    parser = argparse.ArgumentParser(
        description='Change a music file metadata and rename it if desired.')
    parser.add_argument('file', type=str, help='a music file')
    parser.add_argument('--artist', help='the song\'s author', required=True)
    parser.add_argument('--title', help='the song\'s title', required=True)
    parser.add_argument('--album', help='the song\'s album')
    parser.add_argument('-r', action='store_true',
                        help='renames the file in-place by formatting it as \
                        \"Artist - Title.ext\"')

    args = parser.parse_args()
    if not os.path.exists(args.file):
        progname = os.path.basename(sys.argv[0])
        print(f"{progname}: file not found", file=sys.stderr)
        sys.exit(1)

    change_metadata(args.file, args.artist, args.title, args.album)

    if args.r:
        location = os.path.dirname(os.path.abspath(args.file)) + '/'
        extension = os.path.splitext(args.file)[1]

        os.rename(args.file, location +
                  f'{args.artist} - {args.title}{extension}')


if __name__ == "__main__":
    main()
